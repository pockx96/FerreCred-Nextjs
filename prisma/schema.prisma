generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  ProductId   String  @id
  description String  @unique
  stock       Int
  price       Float
  weight      Float
  saleSaleId  String?
}

model Sale {
  SaleId      String  @id
  date        String
  total       Decimal @db.Decimal(10, 2)
  methodPay   String
  clientSale  Int
  productSale String
  saleTicket  String
}

model Client {
  ClientId       Int    @id @default(autoincrement())
  name           String
  address        String
  phone          String
  creditLimit    Float
  currentBalance Float
  email          String
  debts          Debt[]
}

model Debt {
  DebtId   Int     @id @default(autoincrement())
  amount   Decimal @db.Decimal(10, 2)
  isPaid   Boolean @default(false)
  clientId Int
  saleId   Int?
  client   Client  @relation(fields: [clientId], references: [ClientId])

  @@index([clientId], map: "Debt_clientId_fkey")
}

model Provider {
  Rfc          String @id
  nameProvider String
  telephone    String
  direction    String
  Debts        Float
}

model PurchaseOrder {
  id       Int    @id @default(autoincrement())
  product  String
  amount   Int
  price    Float
  provider String
}

model CashRegisterClose {
  CashRegisterCloseid Int    @id @default(autoincrement())
  user                String
  efective            Float
  dollar              Float
  credit              Float
  debit               Float
  date                String
}

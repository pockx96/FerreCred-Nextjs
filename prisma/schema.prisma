// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text  
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Product {
    code        String  @id 
    saleId     Int
    sale   Sale @relation(fields: [saleId],references: [id])
    description String
    stock       Int
    price       Float
    weight      Float
}

model Client {
  id            Int       @id @default(autoincrement())
  name          String
  address       String
  phone         String
  creditLimit   Float
  currentBalance Float
  email         String
  debts         Debt[]     // Relation to debts
}

model Sale {
  id            Int       @id @default(autoincrement())
  date          DateTime  @default(now())
  totalAmount   Decimal   @db.Decimal(10, 2)
  isCredit      Boolean   // Indicates if the sale was on credit
  clientId      Int       // Relation to Client
  debt          Debt?     @relation(fields: [clientId], references: [id])
  products      Product[]

}

model Debt {
  id            Int       @id @default(autoincrement())
  amount        Decimal   @db.Decimal(10, 2)
  isPaid        Boolean   @default(false) // Indicates if the debt is settled
  clientId      Int       // Relation to Client
  client        Client    @relation(fields: [clientId], references: [id])
  saleId        Int?      // Relation to Sale
  sale          Sale[]
}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Product {
    ProductId   String @id
    sale        Sale   @relation(fields: [code], references: [productSale])
    description String @unique
    stock       Int
    price       Float
    weight      Float
}

model Sale {
    SaleId      String    @id
    date        DateTime  @default(now())
    total       Decimal   @db.Decimal(10, 2)
    isCredit    Boolean // Indicates if the sale was on credit
    clientSale      Int // Relation to Client
    productSale String
    Clietn        Client     @relation(fields: [clientSale], references: [ClientId])
    products    Product[]
    amount      Int
}

model Client {
    ClientId       Int    @id @default(autoincrement())
    name           String
    address        String
    phone          String
    creditLimit    Float
    currentBalance Float
    email          String
    debts          Debt[] // Relation to debts
}

model Debt {
    DebtId   Int     @id @default(autoincrement())
    amount   Decimal @db.Decimal(10, 2)
    isPaid   Boolean @default(false) // Indicates if the debt is settled
    clientId Int // Relation to Client
    client   Client  @relation(fields: [clientId], references: [id])
    saleId   Int? // Relation to Sale
    sale     Sale[]
}

model provider {
    Rfc          String @id
    nameProvider String
    telephone    String
    direction    String
    Debts        Float
}

model PurchaseOrder {
    id Int @id @default(autoincrement())
}
